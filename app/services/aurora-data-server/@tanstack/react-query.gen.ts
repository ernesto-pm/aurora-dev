// This file is auto-generated by @hey-api/openapi-ts

import { type Options, getAllMaOrdersSummaries, createWeeklyOrderSummary, getOrderSummaryFileLink, doFrequencyAnalysisForProductVariants, doFrequencyAnalysisForProducts } from '../sdk.gen';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { GetAllMaOrdersSummariesData, CreateWeeklyOrderSummaryData, CreateWeeklyOrderSummaryError, CreateWeeklyOrderSummaryResponse, GetOrderSummaryFileLinkData, GetOrderSummaryFileLinkError, GetOrderSummaryFileLinkResponse, DoFrequencyAnalysisForProductVariantsData, DoFrequencyAnalysisForProductVariantsError, DoFrequencyAnalysisForProductsData, DoFrequencyAnalysisForProductsError } from '../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: options?.baseURL || (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getAllMaOrdersSummariesQueryKey = (options?: Options<GetAllMaOrdersSummariesData>) => createQueryKey('getAllMaOrdersSummaries', options);

/**
 * Get All Ma Orders Summaries
 */
export const getAllMaOrdersSummariesOptions = (options?: Options<GetAllMaOrdersSummariesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllMaOrdersSummaries({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllMaOrdersSummariesQueryKey(options)
    });
};

export const createWeeklyOrderSummaryQueryKey = (options: Options<CreateWeeklyOrderSummaryData>) => createQueryKey('createWeeklyOrderSummary', options);

/**
 * Create Weekly Order Summary
 */
export const createWeeklyOrderSummaryOptions = (options: Options<CreateWeeklyOrderSummaryData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createWeeklyOrderSummary({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createWeeklyOrderSummaryQueryKey(options)
    });
};

/**
 * Create Weekly Order Summary
 */
export const createWeeklyOrderSummaryMutation = (options?: Partial<Options<CreateWeeklyOrderSummaryData>>): UseMutationOptions<CreateWeeklyOrderSummaryResponse, AxiosError<CreateWeeklyOrderSummaryError>, Options<CreateWeeklyOrderSummaryData>> => {
    const mutationOptions: UseMutationOptions<CreateWeeklyOrderSummaryResponse, AxiosError<CreateWeeklyOrderSummaryError>, Options<CreateWeeklyOrderSummaryData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createWeeklyOrderSummary({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getOrderSummaryFileLinkQueryKey = (options: Options<GetOrderSummaryFileLinkData>) => createQueryKey('getOrderSummaryFileLink', options);

/**
 * Get Order Summary File Link
 */
export const getOrderSummaryFileLinkOptions = (options: Options<GetOrderSummaryFileLinkData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOrderSummaryFileLink({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOrderSummaryFileLinkQueryKey(options)
    });
};

/**
 * Get Order Summary File Link
 */
export const getOrderSummaryFileLinkMutation = (options?: Partial<Options<GetOrderSummaryFileLinkData>>): UseMutationOptions<GetOrderSummaryFileLinkResponse, AxiosError<GetOrderSummaryFileLinkError>, Options<GetOrderSummaryFileLinkData>> => {
    const mutationOptions: UseMutationOptions<GetOrderSummaryFileLinkResponse, AxiosError<GetOrderSummaryFileLinkError>, Options<GetOrderSummaryFileLinkData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await getOrderSummaryFileLink({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const doFrequencyAnalysisForProductVariantsQueryKey = (options: Options<DoFrequencyAnalysisForProductVariantsData>) => createQueryKey('doFrequencyAnalysisForProductVariants', options);

/**
 * Do Frequency Analysis For Product Variants
 */
export const doFrequencyAnalysisForProductVariantsOptions = (options: Options<DoFrequencyAnalysisForProductVariantsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await doFrequencyAnalysisForProductVariants({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: doFrequencyAnalysisForProductVariantsQueryKey(options)
    });
};

/**
 * Do Frequency Analysis For Product Variants
 */
export const doFrequencyAnalysisForProductVariantsMutation = (options?: Partial<Options<DoFrequencyAnalysisForProductVariantsData>>): UseMutationOptions<unknown, AxiosError<DoFrequencyAnalysisForProductVariantsError>, Options<DoFrequencyAnalysisForProductVariantsData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DoFrequencyAnalysisForProductVariantsError>, Options<DoFrequencyAnalysisForProductVariantsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await doFrequencyAnalysisForProductVariants({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const doFrequencyAnalysisForProductsQueryKey = (options: Options<DoFrequencyAnalysisForProductsData>) => createQueryKey('doFrequencyAnalysisForProducts', options);

/**
 * Do Frequency Analysis For Products
 */
export const doFrequencyAnalysisForProductsOptions = (options: Options<DoFrequencyAnalysisForProductsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await doFrequencyAnalysisForProducts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: doFrequencyAnalysisForProductsQueryKey(options)
    });
};

/**
 * Do Frequency Analysis For Products
 */
export const doFrequencyAnalysisForProductsMutation = (options?: Partial<Options<DoFrequencyAnalysisForProductsData>>): UseMutationOptions<unknown, AxiosError<DoFrequencyAnalysisForProductsError>, Options<DoFrequencyAnalysisForProductsData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DoFrequencyAnalysisForProductsError>, Options<DoFrequencyAnalysisForProductsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await doFrequencyAnalysisForProducts({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};