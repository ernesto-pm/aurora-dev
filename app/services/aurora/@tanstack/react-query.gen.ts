// This file is auto-generated by @hey-api/openapi-ts

import { type Options, getAllAssistants, getAllBusinesses, createBusiness, getBusinessesForUser, getBusinessesForSupabaseUser, insertExternalCustomer, insertExternalOrder, grantAccessForUser, grantAccessForSupabaseUserEmail, findBusinessWithEncodedName, getBusinessesDataConnectionsForSupabaseUser, createChat, getAllChatsForSupabaseUser, getAllAssistantBrains, loginUser, signupStandardUser, getAllUsers, registerAuroraVisit, getRecentVisits, insertMaProductForBusiness, getMaProductsForBusiness, registerSalesForMa, getMaProductsForBusinessSupabase, adminGetAllMaOrders, calculateMetricAnalysis, getMaOrders, getMaProducts, getLineItems, newConversation, testNewMessage, loadOrders, loadProducts, loadCustomers, loadOrderLineItems, ordersPerMonth, geocodeAddressesForBusinesses, loadPostalCodeMapping, loadShopifyAddresses, loadShopifyProducts, loadShopifyProductVariants, loadShopifyCustomers, loadShopifyOrders, loadLineItems, getAllMemoryBlockTemplates, lettaCreateMemoryBlockTemplate, getAllAssistantTemplates, lettaCreateAssistantTemplate, associateAssistantWithMemoryBlock, getAllMemoryBlocksForAssistantTemplates, deleteAssistantTemplate, getDashboardsForSupabaseUser, getSalesPerMonth, getOrderRevenuePerMonth, getTotalSalesPerProductAndVariants, getTotalItemsForProductsWithoutVariants, getTotalItemsForVariants, getTotalsForProductsAndVariants, loadRawOrders, loadRawLineItems, loadRawProducts, loadProductsWithParams, loadProductVariantsWithParams, loadOrdersWithParams, loadLineItemsWithParams, loadCustomersWithParams, loadAddressesWithParams, generalAssistantChatCompletion, getAllMessagesForChat } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, type DefaultError } from '@tanstack/react-query';
import type { GetAllAssistantsData, GetAllBusinessesData, CreateBusinessData, CreateBusinessError, CreateBusinessResponse2, GetBusinessesForUserData, GetBusinessesForUserError, GetBusinessesForUserResponse, GetBusinessesForSupabaseUserData, GetBusinessesForSupabaseUserResponse, InsertExternalCustomerData, InsertExternalCustomerError, InsertExternalCustomerResponse, InsertExternalOrderData, InsertExternalOrderError, InsertExternalOrderResponse, GrantAccessForUserData, GrantAccessForUserError, GrantAccessForUserResponse, GrantAccessForSupabaseUserEmailData, GrantAccessForSupabaseUserEmailError, GrantAccessForSupabaseUserEmailResponse, FindBusinessWithEncodedNameData, FindBusinessWithEncodedNameError, FindBusinessWithEncodedNameResponse, GetBusinessesDataConnectionsForSupabaseUserData, CreateChatData, CreateChatError, CreateChatResponse, GetAllChatsForSupabaseUserData, GetAllAssistantBrainsData, LoginUserData, LoginUserError, LoginUserResponse, SignupStandardUserData, SignupStandardUserError, GetAllUsersData, RegisterAuroraVisitData, RegisterAuroraVisitResponse, GetRecentVisitsData, InsertMaProductForBusinessData, InsertMaProductForBusinessError, InsertMaProductForBusinessResponse, GetMaProductsForBusinessData, RegisterSalesForMaData, RegisterSalesForMaError, RegisterSalesForMaResponse, GetMaProductsForBusinessSupabaseData, AdminGetAllMaOrdersData, CalculateMetricAnalysisData, GetMaOrdersData, GetMaOrdersError, GetMaOrdersResponse, GetMaProductsData, GetMaProductsResponse, GetLineItemsData, GetLineItemsError, GetLineItemsResponse, NewConversationData, NewConversationError, NewConversationResponse, TestNewMessageData, TestNewMessageError, LoadOrdersData, LoadOrdersError, LoadProductsData, LoadProductsError, LoadCustomersData, LoadCustomersError, LoadOrderLineItemsData, LoadOrderLineItemsError, OrdersPerMonthData, OrdersPerMonthError, GeocodeAddressesForBusinessesData, GeocodeAddressesForBusinessesError, LoadPostalCodeMappingData, LoadPostalCodeMappingError, LoadShopifyAddressesData, LoadShopifyAddressesError, LoadShopifyProductsData, LoadShopifyProductsError, LoadShopifyProductVariantsData, LoadShopifyProductVariantsError, LoadShopifyCustomersData, LoadShopifyCustomersError, LoadShopifyOrdersData, LoadShopifyOrdersError, LoadLineItemsData, LoadLineItemsError, GetAllMemoryBlockTemplatesData, LettaCreateMemoryBlockTemplateData, LettaCreateMemoryBlockTemplateError, LettaCreateMemoryBlockTemplateResponse, GetAllAssistantTemplatesData, LettaCreateAssistantTemplateData, LettaCreateAssistantTemplateError, LettaCreateAssistantTemplateResponse, AssociateAssistantWithMemoryBlockData, AssociateAssistantWithMemoryBlockError, AssociateAssistantWithMemoryBlockResponse, GetAllMemoryBlocksForAssistantTemplatesData, GetAllMemoryBlocksForAssistantTemplatesError, GetAllMemoryBlocksForAssistantTemplatesResponse, DeleteAssistantTemplateData, DeleteAssistantTemplateError, GetDashboardsForSupabaseUserData, GetSalesPerMonthData, GetSalesPerMonthError, GetSalesPerMonthResponse2, GetOrderRevenuePerMonthData, GetOrderRevenuePerMonthError, GetOrderRevenuePerMonthResponse2, GetTotalSalesPerProductAndVariantsData, GetTotalSalesPerProductAndVariantsError, GetTotalSalesPerProductAndVariantsResponse, GetTotalItemsForProductsWithoutVariantsData, GetTotalItemsForProductsWithoutVariantsError, GetTotalItemsForProductsWithoutVariantsResponse, GetTotalItemsForVariantsData, GetTotalItemsForVariantsError, GetTotalItemsForVariantsResponse, GetTotalsForProductsAndVariantsData, GetTotalsForProductsAndVariantsError, GetTotalsForProductsAndVariantsResponse, LoadRawOrdersData, LoadRawOrdersError, LoadRawLineItemsData, LoadRawLineItemsError, LoadRawProductsData, LoadRawProductsError, LoadProductsWithParamsData, LoadProductsWithParamsError, LoadProductVariantsWithParamsData, LoadProductVariantsWithParamsError, LoadOrdersWithParamsData, LoadOrdersWithParamsError, LoadLineItemsWithParamsData, LoadLineItemsWithParamsError, LoadCustomersWithParamsData, LoadCustomersWithParamsError, LoadAddressesWithParamsData, LoadAddressesWithParamsError, GeneralAssistantChatCompletionData, GeneralAssistantChatCompletionError, GeneralAssistantChatCompletionResponse, GetAllMessagesForChatData } from '../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: options?.baseURL || (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getAllAssistantsQueryKey = (options?: Options<GetAllAssistantsData>) => createQueryKey('getAllAssistants', options);

/**
 * Get All Assistants
 */
export const getAllAssistantsOptions = (options?: Options<GetAllAssistantsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllAssistants({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllAssistantsQueryKey(options)
    });
};

export const getAllBusinessesQueryKey = (options?: Options<GetAllBusinessesData>) => createQueryKey('getAllBusinesses', options);

/**
 * Get All Businesses
 */
export const getAllBusinessesOptions = (options?: Options<GetAllBusinessesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllBusinesses({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllBusinessesQueryKey(options)
    });
};

export const createBusinessQueryKey = (options: Options<CreateBusinessData>) => createQueryKey('createBusiness', options);

/**
 * Create Business
 */
export const createBusinessOptions = (options: Options<CreateBusinessData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createBusiness({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createBusinessQueryKey(options)
    });
};

/**
 * Create Business
 */
export const createBusinessMutation = (options?: Partial<Options<CreateBusinessData>>): UseMutationOptions<CreateBusinessResponse2, AxiosError<CreateBusinessError>, Options<CreateBusinessData>> => {
    const mutationOptions: UseMutationOptions<CreateBusinessResponse2, AxiosError<CreateBusinessError>, Options<CreateBusinessData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createBusiness({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getBusinessesForUserQueryKey = (options: Options<GetBusinessesForUserData>) => createQueryKey('getBusinessesForUser', options);

/**
 * Get Businesses For User
 */
export const getBusinessesForUserOptions = (options: Options<GetBusinessesForUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBusinessesForUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBusinessesForUserQueryKey(options)
    });
};

/**
 * Get Businesses For User
 */
export const getBusinessesForUserMutation = (options?: Partial<Options<GetBusinessesForUserData>>): UseMutationOptions<GetBusinessesForUserResponse, AxiosError<GetBusinessesForUserError>, Options<GetBusinessesForUserData>> => {
    const mutationOptions: UseMutationOptions<GetBusinessesForUserResponse, AxiosError<GetBusinessesForUserError>, Options<GetBusinessesForUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await getBusinessesForUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getBusinessesForSupabaseUserQueryKey = (options?: Options<GetBusinessesForSupabaseUserData>) => createQueryKey('getBusinessesForSupabaseUser', options);

/**
 * Get Businesses For Supabase User
 */
export const getBusinessesForSupabaseUserOptions = (options?: Options<GetBusinessesForSupabaseUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBusinessesForSupabaseUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBusinessesForSupabaseUserQueryKey(options)
    });
};

/**
 * Get Businesses For Supabase User
 */
export const getBusinessesForSupabaseUserMutation = (options?: Partial<Options<GetBusinessesForSupabaseUserData>>): UseMutationOptions<GetBusinessesForSupabaseUserResponse, AxiosError<DefaultError>, Options<GetBusinessesForSupabaseUserData>> => {
    const mutationOptions: UseMutationOptions<GetBusinessesForSupabaseUserResponse, AxiosError<DefaultError>, Options<GetBusinessesForSupabaseUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await getBusinessesForSupabaseUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const insertExternalCustomerQueryKey = (options: Options<InsertExternalCustomerData>) => createQueryKey('insertExternalCustomer', options);

/**
 * Insert External Customer
 */
export const insertExternalCustomerOptions = (options: Options<InsertExternalCustomerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await insertExternalCustomer({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: insertExternalCustomerQueryKey(options)
    });
};

/**
 * Insert External Customer
 */
export const insertExternalCustomerMutation = (options?: Partial<Options<InsertExternalCustomerData>>): UseMutationOptions<InsertExternalCustomerResponse, AxiosError<InsertExternalCustomerError>, Options<InsertExternalCustomerData>> => {
    const mutationOptions: UseMutationOptions<InsertExternalCustomerResponse, AxiosError<InsertExternalCustomerError>, Options<InsertExternalCustomerData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await insertExternalCustomer({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const insertExternalOrderQueryKey = (options: Options<InsertExternalOrderData>) => createQueryKey('insertExternalOrder', options);

/**
 * Insert External Order
 */
export const insertExternalOrderOptions = (options: Options<InsertExternalOrderData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await insertExternalOrder({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: insertExternalOrderQueryKey(options)
    });
};

/**
 * Insert External Order
 */
export const insertExternalOrderMutation = (options?: Partial<Options<InsertExternalOrderData>>): UseMutationOptions<InsertExternalOrderResponse, AxiosError<InsertExternalOrderError>, Options<InsertExternalOrderData>> => {
    const mutationOptions: UseMutationOptions<InsertExternalOrderResponse, AxiosError<InsertExternalOrderError>, Options<InsertExternalOrderData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await insertExternalOrder({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const grantAccessForUserQueryKey = (options: Options<GrantAccessForUserData>) => createQueryKey('grantAccessForUser', options);

/**
 * Grant Access For User
 */
export const grantAccessForUserOptions = (options: Options<GrantAccessForUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await grantAccessForUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: grantAccessForUserQueryKey(options)
    });
};

/**
 * Grant Access For User
 */
export const grantAccessForUserMutation = (options?: Partial<Options<GrantAccessForUserData>>): UseMutationOptions<GrantAccessForUserResponse, AxiosError<GrantAccessForUserError>, Options<GrantAccessForUserData>> => {
    const mutationOptions: UseMutationOptions<GrantAccessForUserResponse, AxiosError<GrantAccessForUserError>, Options<GrantAccessForUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await grantAccessForUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const grantAccessForSupabaseUserEmailQueryKey = (options: Options<GrantAccessForSupabaseUserEmailData>) => createQueryKey('grantAccessForSupabaseUserEmail', options);

/**
 * Grant Access For Supabase User Email
 */
export const grantAccessForSupabaseUserEmailOptions = (options: Options<GrantAccessForSupabaseUserEmailData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await grantAccessForSupabaseUserEmail({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: grantAccessForSupabaseUserEmailQueryKey(options)
    });
};

/**
 * Grant Access For Supabase User Email
 */
export const grantAccessForSupabaseUserEmailMutation = (options?: Partial<Options<GrantAccessForSupabaseUserEmailData>>): UseMutationOptions<GrantAccessForSupabaseUserEmailResponse, AxiosError<GrantAccessForSupabaseUserEmailError>, Options<GrantAccessForSupabaseUserEmailData>> => {
    const mutationOptions: UseMutationOptions<GrantAccessForSupabaseUserEmailResponse, AxiosError<GrantAccessForSupabaseUserEmailError>, Options<GrantAccessForSupabaseUserEmailData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await grantAccessForSupabaseUserEmail({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findBusinessWithEncodedNameQueryKey = (options: Options<FindBusinessWithEncodedNameData>) => createQueryKey('findBusinessWithEncodedName', options);

/**
 * Find Business With Encoded Name
 */
export const findBusinessWithEncodedNameOptions = (options: Options<FindBusinessWithEncodedNameData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findBusinessWithEncodedName({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findBusinessWithEncodedNameQueryKey(options)
    });
};

/**
 * Find Business With Encoded Name
 */
export const findBusinessWithEncodedNameMutation = (options?: Partial<Options<FindBusinessWithEncodedNameData>>): UseMutationOptions<FindBusinessWithEncodedNameResponse, AxiosError<FindBusinessWithEncodedNameError>, Options<FindBusinessWithEncodedNameData>> => {
    const mutationOptions: UseMutationOptions<FindBusinessWithEncodedNameResponse, AxiosError<FindBusinessWithEncodedNameError>, Options<FindBusinessWithEncodedNameData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await findBusinessWithEncodedName({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getBusinessesDataConnectionsForSupabaseUserQueryKey = (options?: Options<GetBusinessesDataConnectionsForSupabaseUserData>) => createQueryKey('getBusinessesDataConnectionsForSupabaseUser', options);

/**
 * Get Businesses Data Connections For Supabase User
 */
export const getBusinessesDataConnectionsForSupabaseUserOptions = (options?: Options<GetBusinessesDataConnectionsForSupabaseUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBusinessesDataConnectionsForSupabaseUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBusinessesDataConnectionsForSupabaseUserQueryKey(options)
    });
};

export const createChatQueryKey = (options: Options<CreateChatData>) => createQueryKey('createChat', options);

/**
 * Create Chat
 */
export const createChatOptions = (options: Options<CreateChatData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createChat({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createChatQueryKey(options)
    });
};

/**
 * Create Chat
 */
export const createChatMutation = (options?: Partial<Options<CreateChatData>>): UseMutationOptions<CreateChatResponse, AxiosError<CreateChatError>, Options<CreateChatData>> => {
    const mutationOptions: UseMutationOptions<CreateChatResponse, AxiosError<CreateChatError>, Options<CreateChatData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createChat({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAllChatsForSupabaseUserQueryKey = (options?: Options<GetAllChatsForSupabaseUserData>) => createQueryKey('getAllChatsForSupabaseUser', options);

/**
 * Get All Chats For Supabase User
 */
export const getAllChatsForSupabaseUserOptions = (options?: Options<GetAllChatsForSupabaseUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllChatsForSupabaseUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllChatsForSupabaseUserQueryKey(options)
    });
};

export const getAllAssistantBrainsQueryKey = (options?: Options<GetAllAssistantBrainsData>) => createQueryKey('getAllAssistantBrains', options);

/**
 * Get All Assistant Brains
 */
export const getAllAssistantBrainsOptions = (options?: Options<GetAllAssistantBrainsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllAssistantBrains({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllAssistantBrainsQueryKey(options)
    });
};

export const loginUserQueryKey = (options: Options<LoginUserData>) => createQueryKey('loginUser', options);

/**
 * Login User
 */
export const loginUserOptions = (options: Options<LoginUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loginUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loginUserQueryKey(options)
    });
};

/**
 * Login User
 */
export const loginUserMutation = (options?: Partial<Options<LoginUserData>>): UseMutationOptions<LoginUserResponse, AxiosError<LoginUserError>, Options<LoginUserData>> => {
    const mutationOptions: UseMutationOptions<LoginUserResponse, AxiosError<LoginUserError>, Options<LoginUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loginUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const signupStandardUserQueryKey = (options: Options<SignupStandardUserData>) => createQueryKey('signupStandardUser', options);

/**
 * Signup Standard User
 */
export const signupStandardUserOptions = (options: Options<SignupStandardUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await signupStandardUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: signupStandardUserQueryKey(options)
    });
};

/**
 * Signup Standard User
 */
export const signupStandardUserMutation = (options?: Partial<Options<SignupStandardUserData>>): UseMutationOptions<unknown, AxiosError<SignupStandardUserError>, Options<SignupStandardUserData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<SignupStandardUserError>, Options<SignupStandardUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await signupStandardUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAllUsersQueryKey = (options?: Options<GetAllUsersData>) => createQueryKey('getAllUsers', options);

/**
 * Get All Users
 */
export const getAllUsersOptions = (options?: Options<GetAllUsersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllUsers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllUsersQueryKey(options)
    });
};

export const registerAuroraVisitQueryKey = (options?: Options<RegisterAuroraVisitData>) => createQueryKey('registerAuroraVisit', options);

/**
 * Register Aurora Visit
 */
export const registerAuroraVisitOptions = (options?: Options<RegisterAuroraVisitData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await registerAuroraVisit({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: registerAuroraVisitQueryKey(options)
    });
};

/**
 * Register Aurora Visit
 */
export const registerAuroraVisitMutation = (options?: Partial<Options<RegisterAuroraVisitData>>): UseMutationOptions<RegisterAuroraVisitResponse, AxiosError<DefaultError>, Options<RegisterAuroraVisitData>> => {
    const mutationOptions: UseMutationOptions<RegisterAuroraVisitResponse, AxiosError<DefaultError>, Options<RegisterAuroraVisitData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await registerAuroraVisit({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getRecentVisitsQueryKey = (options?: Options<GetRecentVisitsData>) => createQueryKey('getRecentVisits', options);

/**
 * Get Recent Visits
 */
export const getRecentVisitsOptions = (options?: Options<GetRecentVisitsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRecentVisits({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getRecentVisitsQueryKey(options)
    });
};

export const insertMaProductForBusinessQueryKey = (options: Options<InsertMaProductForBusinessData>) => createQueryKey('insertMaProductForBusiness', options);

/**
 * Insert Ma Product For Business
 */
export const insertMaProductForBusinessOptions = (options: Options<InsertMaProductForBusinessData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await insertMaProductForBusiness({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: insertMaProductForBusinessQueryKey(options)
    });
};

/**
 * Insert Ma Product For Business
 */
export const insertMaProductForBusinessMutation = (options?: Partial<Options<InsertMaProductForBusinessData>>): UseMutationOptions<InsertMaProductForBusinessResponse, AxiosError<InsertMaProductForBusinessError>, Options<InsertMaProductForBusinessData>> => {
    const mutationOptions: UseMutationOptions<InsertMaProductForBusinessResponse, AxiosError<InsertMaProductForBusinessError>, Options<InsertMaProductForBusinessData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await insertMaProductForBusiness({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getMaProductsForBusinessQueryKey = (options: Options<GetMaProductsForBusinessData>) => createQueryKey('getMaProductsForBusiness', options);

/**
 * Get Ma Products For Business
 */
export const getMaProductsForBusinessOptions = (options: Options<GetMaProductsForBusinessData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMaProductsForBusiness({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMaProductsForBusinessQueryKey(options)
    });
};

export const registerSalesForMaQueryKey = (options: Options<RegisterSalesForMaData>) => createQueryKey('registerSalesForMa', options);

/**
 * Register Sales For Ma
 * Adds a new sale and returns the UUIDs of the sales that were added to the database
 */
export const registerSalesForMaOptions = (options: Options<RegisterSalesForMaData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await registerSalesForMa({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: registerSalesForMaQueryKey(options)
    });
};

/**
 * Register Sales For Ma
 * Adds a new sale and returns the UUIDs of the sales that were added to the database
 */
export const registerSalesForMaMutation = (options?: Partial<Options<RegisterSalesForMaData>>): UseMutationOptions<RegisterSalesForMaResponse, AxiosError<RegisterSalesForMaError>, Options<RegisterSalesForMaData>> => {
    const mutationOptions: UseMutationOptions<RegisterSalesForMaResponse, AxiosError<RegisterSalesForMaError>, Options<RegisterSalesForMaData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await registerSalesForMa({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getMaProductsForBusinessSupabaseQueryKey = (options: Options<GetMaProductsForBusinessSupabaseData>) => createQueryKey('getMaProductsForBusinessSupabase', options);

/**
 * Get Ma Products For Business Supabase
 */
export const getMaProductsForBusinessSupabaseOptions = (options: Options<GetMaProductsForBusinessSupabaseData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMaProductsForBusinessSupabase({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMaProductsForBusinessSupabaseQueryKey(options)
    });
};

export const adminGetAllMaOrdersQueryKey = (options?: Options<AdminGetAllMaOrdersData>) => createQueryKey('adminGetAllMaOrders', options);

/**
 * Admin Get All Ma Orders
 */
export const adminGetAllMaOrdersOptions = (options?: Options<AdminGetAllMaOrdersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await adminGetAllMaOrders({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: adminGetAllMaOrdersQueryKey(options)
    });
};

export const calculateMetricAnalysisQueryKey = (options?: Options<CalculateMetricAnalysisData>) => createQueryKey('calculateMetricAnalysis', options);

/**
 * Calculate Metric Analysis
 */
export const calculateMetricAnalysisOptions = (options?: Options<CalculateMetricAnalysisData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await calculateMetricAnalysis({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: calculateMetricAnalysisQueryKey(options)
    });
};

export const getMaOrdersQueryKey = (options: Options<GetMaOrdersData>) => createQueryKey('getMaOrders', options);

/**
 * Get Ma Orders
 */
export const getMaOrdersOptions = (options: Options<GetMaOrdersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMaOrders({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMaOrdersQueryKey(options)
    });
};

/**
 * Get Ma Orders
 */
export const getMaOrdersMutation = (options?: Partial<Options<GetMaOrdersData>>): UseMutationOptions<GetMaOrdersResponse, AxiosError<GetMaOrdersError>, Options<GetMaOrdersData>> => {
    const mutationOptions: UseMutationOptions<GetMaOrdersResponse, AxiosError<GetMaOrdersError>, Options<GetMaOrdersData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await getMaOrders({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getMaProductsQueryKey = (options?: Options<GetMaProductsData>) => createQueryKey('getMaProducts', options);

/**
 * Get Ma Products
 */
export const getMaProductsOptions = (options?: Options<GetMaProductsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMaProducts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMaProductsQueryKey(options)
    });
};

/**
 * Get Ma Products
 */
export const getMaProductsMutation = (options?: Partial<Options<GetMaProductsData>>): UseMutationOptions<GetMaProductsResponse, AxiosError<DefaultError>, Options<GetMaProductsData>> => {
    const mutationOptions: UseMutationOptions<GetMaProductsResponse, AxiosError<DefaultError>, Options<GetMaProductsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await getMaProducts({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getLineItemsQueryKey = (options: Options<GetLineItemsData>) => createQueryKey('getLineItems', options);

/**
 * Get Line Items
 */
export const getLineItemsOptions = (options: Options<GetLineItemsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getLineItems({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getLineItemsQueryKey(options)
    });
};

/**
 * Get Line Items
 */
export const getLineItemsMutation = (options?: Partial<Options<GetLineItemsData>>): UseMutationOptions<GetLineItemsResponse, AxiosError<GetLineItemsError>, Options<GetLineItemsData>> => {
    const mutationOptions: UseMutationOptions<GetLineItemsResponse, AxiosError<GetLineItemsError>, Options<GetLineItemsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await getLineItems({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const newConversationQueryKey = (options: Options<NewConversationData>) => createQueryKey('newConversation', options);

/**
 * New Conversation
 */
export const newConversationOptions = (options: Options<NewConversationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await newConversation({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: newConversationQueryKey(options)
    });
};

/**
 * New Conversation
 */
export const newConversationMutation = (options?: Partial<Options<NewConversationData>>): UseMutationOptions<NewConversationResponse, AxiosError<NewConversationError>, Options<NewConversationData>> => {
    const mutationOptions: UseMutationOptions<NewConversationResponse, AxiosError<NewConversationError>, Options<NewConversationData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await newConversation({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const testNewMessageQueryKey = (options: Options<TestNewMessageData>) => createQueryKey('testNewMessage', options);

/**
 * Test New Message
 */
export const testNewMessageOptions = (options: Options<TestNewMessageData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await testNewMessage({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: testNewMessageQueryKey(options)
    });
};

/**
 * Test New Message
 */
export const testNewMessageMutation = (options?: Partial<Options<TestNewMessageData>>): UseMutationOptions<unknown, AxiosError<TestNewMessageError>, Options<TestNewMessageData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<TestNewMessageError>, Options<TestNewMessageData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await testNewMessage({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loadOrdersQueryKey = (options: Options<LoadOrdersData>) => createQueryKey('loadOrders', options);

/**
 * Load Orders
 */
export const loadOrdersOptions = (options: Options<LoadOrdersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loadOrders({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loadOrdersQueryKey(options)
    });
};

/**
 * Load Orders
 */
export const loadOrdersMutation = (options?: Partial<Options<LoadOrdersData>>): UseMutationOptions<unknown, AxiosError<LoadOrdersError>, Options<LoadOrdersData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<LoadOrdersError>, Options<LoadOrdersData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loadOrders({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loadProductsQueryKey = (options: Options<LoadProductsData>) => createQueryKey('loadProducts', options);

/**
 * Load Products
 */
export const loadProductsOptions = (options: Options<LoadProductsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loadProducts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loadProductsQueryKey(options)
    });
};

/**
 * Load Products
 */
export const loadProductsMutation = (options?: Partial<Options<LoadProductsData>>): UseMutationOptions<unknown, AxiosError<LoadProductsError>, Options<LoadProductsData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<LoadProductsError>, Options<LoadProductsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loadProducts({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loadCustomersQueryKey = (options: Options<LoadCustomersData>) => createQueryKey('loadCustomers', options);

/**
 * Load Customers
 */
export const loadCustomersOptions = (options: Options<LoadCustomersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loadCustomers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loadCustomersQueryKey(options)
    });
};

/**
 * Load Customers
 */
export const loadCustomersMutation = (options?: Partial<Options<LoadCustomersData>>): UseMutationOptions<unknown, AxiosError<LoadCustomersError>, Options<LoadCustomersData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<LoadCustomersError>, Options<LoadCustomersData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loadCustomers({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loadOrderLineItemsQueryKey = (options: Options<LoadOrderLineItemsData>) => createQueryKey('loadOrderLineItems', options);

/**
 * Load Order Line Items
 */
export const loadOrderLineItemsOptions = (options: Options<LoadOrderLineItemsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loadOrderLineItems({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loadOrderLineItemsQueryKey(options)
    });
};

/**
 * Load Order Line Items
 */
export const loadOrderLineItemsMutation = (options?: Partial<Options<LoadOrderLineItemsData>>): UseMutationOptions<unknown, AxiosError<LoadOrderLineItemsError>, Options<LoadOrderLineItemsData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<LoadOrderLineItemsError>, Options<LoadOrderLineItemsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loadOrderLineItems({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const ordersPerMonthQueryKey = (options: Options<OrdersPerMonthData>) => createQueryKey('ordersPerMonth', options);

/**
 * Orders Per Month
 */
export const ordersPerMonthOptions = (options: Options<OrdersPerMonthData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await ordersPerMonth({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: ordersPerMonthQueryKey(options)
    });
};

/**
 * Orders Per Month
 */
export const ordersPerMonthMutation = (options?: Partial<Options<OrdersPerMonthData>>): UseMutationOptions<unknown, AxiosError<OrdersPerMonthError>, Options<OrdersPerMonthData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<OrdersPerMonthError>, Options<OrdersPerMonthData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await ordersPerMonth({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const geocodeAddressesForBusinessesQueryKey = (options: Options<GeocodeAddressesForBusinessesData>) => createQueryKey('geocodeAddressesForBusinesses', options);

/**
 * Geocode Addresses For Businesses
 */
export const geocodeAddressesForBusinessesOptions = (options: Options<GeocodeAddressesForBusinessesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await geocodeAddressesForBusinesses({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: geocodeAddressesForBusinessesQueryKey(options)
    });
};

/**
 * Geocode Addresses For Businesses
 */
export const geocodeAddressesForBusinessesMutation = (options?: Partial<Options<GeocodeAddressesForBusinessesData>>): UseMutationOptions<unknown, AxiosError<GeocodeAddressesForBusinessesError>, Options<GeocodeAddressesForBusinessesData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<GeocodeAddressesForBusinessesError>, Options<GeocodeAddressesForBusinessesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await geocodeAddressesForBusinesses({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loadPostalCodeMappingQueryKey = (options: Options<LoadPostalCodeMappingData>) => createQueryKey('loadPostalCodeMapping', options);

/**
 * Load Postal Code Mapping
 */
export const loadPostalCodeMappingOptions = (options: Options<LoadPostalCodeMappingData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loadPostalCodeMapping({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loadPostalCodeMappingQueryKey(options)
    });
};

/**
 * Load Postal Code Mapping
 */
export const loadPostalCodeMappingMutation = (options?: Partial<Options<LoadPostalCodeMappingData>>): UseMutationOptions<unknown, AxiosError<LoadPostalCodeMappingError>, Options<LoadPostalCodeMappingData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<LoadPostalCodeMappingError>, Options<LoadPostalCodeMappingData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loadPostalCodeMapping({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loadShopifyAddressesQueryKey = (options: Options<LoadShopifyAddressesData>) => createQueryKey('loadShopifyAddresses', options);

/**
 * Load Shopify Addresses
 */
export const loadShopifyAddressesOptions = (options: Options<LoadShopifyAddressesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loadShopifyAddresses({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loadShopifyAddressesQueryKey(options)
    });
};

/**
 * Load Shopify Addresses
 */
export const loadShopifyAddressesMutation = (options?: Partial<Options<LoadShopifyAddressesData>>): UseMutationOptions<unknown, AxiosError<LoadShopifyAddressesError>, Options<LoadShopifyAddressesData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<LoadShopifyAddressesError>, Options<LoadShopifyAddressesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loadShopifyAddresses({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loadShopifyProductsQueryKey = (options: Options<LoadShopifyProductsData>) => createQueryKey('loadShopifyProducts', options);

/**
 * Load Shopify Products
 */
export const loadShopifyProductsOptions = (options: Options<LoadShopifyProductsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loadShopifyProducts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loadShopifyProductsQueryKey(options)
    });
};

/**
 * Load Shopify Products
 */
export const loadShopifyProductsMutation = (options?: Partial<Options<LoadShopifyProductsData>>): UseMutationOptions<unknown, AxiosError<LoadShopifyProductsError>, Options<LoadShopifyProductsData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<LoadShopifyProductsError>, Options<LoadShopifyProductsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loadShopifyProducts({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loadShopifyProductVariantsQueryKey = (options: Options<LoadShopifyProductVariantsData>) => createQueryKey('loadShopifyProductVariants', options);

/**
 * Load Shopify Product Variants
 */
export const loadShopifyProductVariantsOptions = (options: Options<LoadShopifyProductVariantsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loadShopifyProductVariants({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loadShopifyProductVariantsQueryKey(options)
    });
};

/**
 * Load Shopify Product Variants
 */
export const loadShopifyProductVariantsMutation = (options?: Partial<Options<LoadShopifyProductVariantsData>>): UseMutationOptions<unknown, AxiosError<LoadShopifyProductVariantsError>, Options<LoadShopifyProductVariantsData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<LoadShopifyProductVariantsError>, Options<LoadShopifyProductVariantsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loadShopifyProductVariants({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loadShopifyCustomersQueryKey = (options: Options<LoadShopifyCustomersData>) => createQueryKey('loadShopifyCustomers', options);

/**
 * Load Shopify Customers
 */
export const loadShopifyCustomersOptions = (options: Options<LoadShopifyCustomersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loadShopifyCustomers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loadShopifyCustomersQueryKey(options)
    });
};

/**
 * Load Shopify Customers
 */
export const loadShopifyCustomersMutation = (options?: Partial<Options<LoadShopifyCustomersData>>): UseMutationOptions<unknown, AxiosError<LoadShopifyCustomersError>, Options<LoadShopifyCustomersData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<LoadShopifyCustomersError>, Options<LoadShopifyCustomersData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loadShopifyCustomers({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loadShopifyOrdersQueryKey = (options: Options<LoadShopifyOrdersData>) => createQueryKey('loadShopifyOrders', options);

/**
 * Load Shopify Orders
 */
export const loadShopifyOrdersOptions = (options: Options<LoadShopifyOrdersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loadShopifyOrders({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loadShopifyOrdersQueryKey(options)
    });
};

/**
 * Load Shopify Orders
 */
export const loadShopifyOrdersMutation = (options?: Partial<Options<LoadShopifyOrdersData>>): UseMutationOptions<unknown, AxiosError<LoadShopifyOrdersError>, Options<LoadShopifyOrdersData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<LoadShopifyOrdersError>, Options<LoadShopifyOrdersData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loadShopifyOrders({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loadLineItemsQueryKey = (options: Options<LoadLineItemsData>) => createQueryKey('loadLineItems', options);

/**
 * Load Line Items
 */
export const loadLineItemsOptions = (options: Options<LoadLineItemsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loadLineItems({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loadLineItemsQueryKey(options)
    });
};

/**
 * Load Line Items
 */
export const loadLineItemsMutation = (options?: Partial<Options<LoadLineItemsData>>): UseMutationOptions<unknown, AxiosError<LoadLineItemsError>, Options<LoadLineItemsData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<LoadLineItemsError>, Options<LoadLineItemsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loadLineItems({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAllMemoryBlockTemplatesQueryKey = (options?: Options<GetAllMemoryBlockTemplatesData>) => createQueryKey('getAllMemoryBlockTemplates', options);

/**
 * Get All Memory Block Templates
 */
export const getAllMemoryBlockTemplatesOptions = (options?: Options<GetAllMemoryBlockTemplatesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllMemoryBlockTemplates({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllMemoryBlockTemplatesQueryKey(options)
    });
};

export const lettaCreateMemoryBlockTemplateQueryKey = (options: Options<LettaCreateMemoryBlockTemplateData>) => createQueryKey('lettaCreateMemoryBlockTemplate', options);

/**
 * Letta Create Memory Block Template
 */
export const lettaCreateMemoryBlockTemplateOptions = (options: Options<LettaCreateMemoryBlockTemplateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await lettaCreateMemoryBlockTemplate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: lettaCreateMemoryBlockTemplateQueryKey(options)
    });
};

/**
 * Letta Create Memory Block Template
 */
export const lettaCreateMemoryBlockTemplateMutation = (options?: Partial<Options<LettaCreateMemoryBlockTemplateData>>): UseMutationOptions<LettaCreateMemoryBlockTemplateResponse, AxiosError<LettaCreateMemoryBlockTemplateError>, Options<LettaCreateMemoryBlockTemplateData>> => {
    const mutationOptions: UseMutationOptions<LettaCreateMemoryBlockTemplateResponse, AxiosError<LettaCreateMemoryBlockTemplateError>, Options<LettaCreateMemoryBlockTemplateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await lettaCreateMemoryBlockTemplate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAllAssistantTemplatesQueryKey = (options?: Options<GetAllAssistantTemplatesData>) => createQueryKey('getAllAssistantTemplates', options);

/**
 * Get All Assistant Templates
 */
export const getAllAssistantTemplatesOptions = (options?: Options<GetAllAssistantTemplatesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllAssistantTemplates({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllAssistantTemplatesQueryKey(options)
    });
};

export const lettaCreateAssistantTemplateQueryKey = (options: Options<LettaCreateAssistantTemplateData>) => createQueryKey('lettaCreateAssistantTemplate', options);

/**
 * Letta Create Assistant Template
 */
export const lettaCreateAssistantTemplateOptions = (options: Options<LettaCreateAssistantTemplateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await lettaCreateAssistantTemplate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: lettaCreateAssistantTemplateQueryKey(options)
    });
};

/**
 * Letta Create Assistant Template
 */
export const lettaCreateAssistantTemplateMutation = (options?: Partial<Options<LettaCreateAssistantTemplateData>>): UseMutationOptions<LettaCreateAssistantTemplateResponse, AxiosError<LettaCreateAssistantTemplateError>, Options<LettaCreateAssistantTemplateData>> => {
    const mutationOptions: UseMutationOptions<LettaCreateAssistantTemplateResponse, AxiosError<LettaCreateAssistantTemplateError>, Options<LettaCreateAssistantTemplateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await lettaCreateAssistantTemplate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const associateAssistantWithMemoryBlockQueryKey = (options: Options<AssociateAssistantWithMemoryBlockData>) => createQueryKey('associateAssistantWithMemoryBlock', options);

/**
 * Associate Assistant With Memory Block
 */
export const associateAssistantWithMemoryBlockOptions = (options: Options<AssociateAssistantWithMemoryBlockData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await associateAssistantWithMemoryBlock({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: associateAssistantWithMemoryBlockQueryKey(options)
    });
};

/**
 * Associate Assistant With Memory Block
 */
export const associateAssistantWithMemoryBlockMutation = (options?: Partial<Options<AssociateAssistantWithMemoryBlockData>>): UseMutationOptions<AssociateAssistantWithMemoryBlockResponse, AxiosError<AssociateAssistantWithMemoryBlockError>, Options<AssociateAssistantWithMemoryBlockData>> => {
    const mutationOptions: UseMutationOptions<AssociateAssistantWithMemoryBlockResponse, AxiosError<AssociateAssistantWithMemoryBlockError>, Options<AssociateAssistantWithMemoryBlockData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await associateAssistantWithMemoryBlock({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAllMemoryBlocksForAssistantTemplatesQueryKey = (options: Options<GetAllMemoryBlocksForAssistantTemplatesData>) => createQueryKey('getAllMemoryBlocksForAssistantTemplates', options);

/**
 * Get All Memory Blocks For Assistant Templates
 */
export const getAllMemoryBlocksForAssistantTemplatesOptions = (options: Options<GetAllMemoryBlocksForAssistantTemplatesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllMemoryBlocksForAssistantTemplates({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllMemoryBlocksForAssistantTemplatesQueryKey(options)
    });
};

/**
 * Get All Memory Blocks For Assistant Templates
 */
export const getAllMemoryBlocksForAssistantTemplatesMutation = (options?: Partial<Options<GetAllMemoryBlocksForAssistantTemplatesData>>): UseMutationOptions<GetAllMemoryBlocksForAssistantTemplatesResponse, AxiosError<GetAllMemoryBlocksForAssistantTemplatesError>, Options<GetAllMemoryBlocksForAssistantTemplatesData>> => {
    const mutationOptions: UseMutationOptions<GetAllMemoryBlocksForAssistantTemplatesResponse, AxiosError<GetAllMemoryBlocksForAssistantTemplatesError>, Options<GetAllMemoryBlocksForAssistantTemplatesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await getAllMemoryBlocksForAssistantTemplates({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteAssistantTemplateQueryKey = (options: Options<DeleteAssistantTemplateData>) => createQueryKey('deleteAssistantTemplate', options);

/**
 * Delete Assistant Template
 */
export const deleteAssistantTemplateOptions = (options: Options<DeleteAssistantTemplateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await deleteAssistantTemplate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: deleteAssistantTemplateQueryKey(options)
    });
};

/**
 * Delete Assistant Template
 */
export const deleteAssistantTemplateMutation = (options?: Partial<Options<DeleteAssistantTemplateData>>): UseMutationOptions<unknown, AxiosError<DeleteAssistantTemplateError>, Options<DeleteAssistantTemplateData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DeleteAssistantTemplateError>, Options<DeleteAssistantTemplateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteAssistantTemplate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getDashboardsForSupabaseUserQueryKey = (options?: Options<GetDashboardsForSupabaseUserData>) => createQueryKey('getDashboardsForSupabaseUser', options);

/**
 * Get Dashboards For Supabase User
 */
export const getDashboardsForSupabaseUserOptions = (options?: Options<GetDashboardsForSupabaseUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDashboardsForSupabaseUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getDashboardsForSupabaseUserQueryKey(options)
    });
};

export const getSalesPerMonthQueryKey = (options: Options<GetSalesPerMonthData>) => createQueryKey('getSalesPerMonth', options);

/**
 * Get Sales Per Month
 */
export const getSalesPerMonthOptions = (options: Options<GetSalesPerMonthData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSalesPerMonth({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSalesPerMonthQueryKey(options)
    });
};

/**
 * Get Sales Per Month
 */
export const getSalesPerMonthMutation = (options?: Partial<Options<GetSalesPerMonthData>>): UseMutationOptions<GetSalesPerMonthResponse2, AxiosError<GetSalesPerMonthError>, Options<GetSalesPerMonthData>> => {
    const mutationOptions: UseMutationOptions<GetSalesPerMonthResponse2, AxiosError<GetSalesPerMonthError>, Options<GetSalesPerMonthData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await getSalesPerMonth({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getOrderRevenuePerMonthQueryKey = (options: Options<GetOrderRevenuePerMonthData>) => createQueryKey('getOrderRevenuePerMonth', options);

/**
 * Get Order Revenue Per Month
 */
export const getOrderRevenuePerMonthOptions = (options: Options<GetOrderRevenuePerMonthData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOrderRevenuePerMonth({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOrderRevenuePerMonthQueryKey(options)
    });
};

/**
 * Get Order Revenue Per Month
 */
export const getOrderRevenuePerMonthMutation = (options?: Partial<Options<GetOrderRevenuePerMonthData>>): UseMutationOptions<GetOrderRevenuePerMonthResponse2, AxiosError<GetOrderRevenuePerMonthError>, Options<GetOrderRevenuePerMonthData>> => {
    const mutationOptions: UseMutationOptions<GetOrderRevenuePerMonthResponse2, AxiosError<GetOrderRevenuePerMonthError>, Options<GetOrderRevenuePerMonthData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await getOrderRevenuePerMonth({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTotalSalesPerProductAndVariantsQueryKey = (options: Options<GetTotalSalesPerProductAndVariantsData>) => createQueryKey('getTotalSalesPerProductAndVariants', options);

/**
 * Get Total Sales Per Product And Variants
 */
export const getTotalSalesPerProductAndVariantsOptions = (options: Options<GetTotalSalesPerProductAndVariantsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTotalSalesPerProductAndVariants({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTotalSalesPerProductAndVariantsQueryKey(options)
    });
};

/**
 * Get Total Sales Per Product And Variants
 */
export const getTotalSalesPerProductAndVariantsMutation = (options?: Partial<Options<GetTotalSalesPerProductAndVariantsData>>): UseMutationOptions<GetTotalSalesPerProductAndVariantsResponse, AxiosError<GetTotalSalesPerProductAndVariantsError>, Options<GetTotalSalesPerProductAndVariantsData>> => {
    const mutationOptions: UseMutationOptions<GetTotalSalesPerProductAndVariantsResponse, AxiosError<GetTotalSalesPerProductAndVariantsError>, Options<GetTotalSalesPerProductAndVariantsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await getTotalSalesPerProductAndVariants({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTotalItemsForProductsWithoutVariantsQueryKey = (options: Options<GetTotalItemsForProductsWithoutVariantsData>) => createQueryKey('getTotalItemsForProductsWithoutVariants', options);

/**
 * Get Total Items For Products Without Variants
 */
export const getTotalItemsForProductsWithoutVariantsOptions = (options: Options<GetTotalItemsForProductsWithoutVariantsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTotalItemsForProductsWithoutVariants({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTotalItemsForProductsWithoutVariantsQueryKey(options)
    });
};

/**
 * Get Total Items For Products Without Variants
 */
export const getTotalItemsForProductsWithoutVariantsMutation = (options?: Partial<Options<GetTotalItemsForProductsWithoutVariantsData>>): UseMutationOptions<GetTotalItemsForProductsWithoutVariantsResponse, AxiosError<GetTotalItemsForProductsWithoutVariantsError>, Options<GetTotalItemsForProductsWithoutVariantsData>> => {
    const mutationOptions: UseMutationOptions<GetTotalItemsForProductsWithoutVariantsResponse, AxiosError<GetTotalItemsForProductsWithoutVariantsError>, Options<GetTotalItemsForProductsWithoutVariantsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await getTotalItemsForProductsWithoutVariants({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTotalItemsForVariantsQueryKey = (options: Options<GetTotalItemsForVariantsData>) => createQueryKey('getTotalItemsForVariants', options);

/**
 * Get Total Items For Variants
 */
export const getTotalItemsForVariantsOptions = (options: Options<GetTotalItemsForVariantsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTotalItemsForVariants({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTotalItemsForVariantsQueryKey(options)
    });
};

/**
 * Get Total Items For Variants
 */
export const getTotalItemsForVariantsMutation = (options?: Partial<Options<GetTotalItemsForVariantsData>>): UseMutationOptions<GetTotalItemsForVariantsResponse, AxiosError<GetTotalItemsForVariantsError>, Options<GetTotalItemsForVariantsData>> => {
    const mutationOptions: UseMutationOptions<GetTotalItemsForVariantsResponse, AxiosError<GetTotalItemsForVariantsError>, Options<GetTotalItemsForVariantsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await getTotalItemsForVariants({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTotalsForProductsAndVariantsQueryKey = (options: Options<GetTotalsForProductsAndVariantsData>) => createQueryKey('getTotalsForProductsAndVariants', options);

/**
 * Get Totals For Products And Variants
 */
export const getTotalsForProductsAndVariantsOptions = (options: Options<GetTotalsForProductsAndVariantsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTotalsForProductsAndVariants({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTotalsForProductsAndVariantsQueryKey(options)
    });
};

/**
 * Get Totals For Products And Variants
 */
export const getTotalsForProductsAndVariantsMutation = (options?: Partial<Options<GetTotalsForProductsAndVariantsData>>): UseMutationOptions<GetTotalsForProductsAndVariantsResponse, AxiosError<GetTotalsForProductsAndVariantsError>, Options<GetTotalsForProductsAndVariantsData>> => {
    const mutationOptions: UseMutationOptions<GetTotalsForProductsAndVariantsResponse, AxiosError<GetTotalsForProductsAndVariantsError>, Options<GetTotalsForProductsAndVariantsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await getTotalsForProductsAndVariants({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loadRawOrdersQueryKey = (options: Options<LoadRawOrdersData>) => createQueryKey('loadRawOrders', options);

/**
 * Load Raw Orders
 */
export const loadRawOrdersOptions = (options: Options<LoadRawOrdersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loadRawOrders({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loadRawOrdersQueryKey(options)
    });
};

/**
 * Load Raw Orders
 */
export const loadRawOrdersMutation = (options?: Partial<Options<LoadRawOrdersData>>): UseMutationOptions<unknown, AxiosError<LoadRawOrdersError>, Options<LoadRawOrdersData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<LoadRawOrdersError>, Options<LoadRawOrdersData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loadRawOrders({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loadRawLineItemsQueryKey = (options: Options<LoadRawLineItemsData>) => createQueryKey('loadRawLineItems', options);

/**
 * Load Raw Line Items
 */
export const loadRawLineItemsOptions = (options: Options<LoadRawLineItemsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loadRawLineItems({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loadRawLineItemsQueryKey(options)
    });
};

/**
 * Load Raw Line Items
 */
export const loadRawLineItemsMutation = (options?: Partial<Options<LoadRawLineItemsData>>): UseMutationOptions<unknown, AxiosError<LoadRawLineItemsError>, Options<LoadRawLineItemsData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<LoadRawLineItemsError>, Options<LoadRawLineItemsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loadRawLineItems({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loadRawProductsQueryKey = (options: Options<LoadRawProductsData>) => createQueryKey('loadRawProducts', options);

/**
 * Load Raw Products
 */
export const loadRawProductsOptions = (options: Options<LoadRawProductsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loadRawProducts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loadRawProductsQueryKey(options)
    });
};

/**
 * Load Raw Products
 */
export const loadRawProductsMutation = (options?: Partial<Options<LoadRawProductsData>>): UseMutationOptions<unknown, AxiosError<LoadRawProductsError>, Options<LoadRawProductsData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<LoadRawProductsError>, Options<LoadRawProductsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loadRawProducts({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loadProductsWithParamsQueryKey = (options: Options<LoadProductsWithParamsData>) => createQueryKey('loadProductsWithParams', options);

/**
 * Load Products With Params
 */
export const loadProductsWithParamsOptions = (options: Options<LoadProductsWithParamsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loadProductsWithParams({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loadProductsWithParamsQueryKey(options)
    });
};

/**
 * Load Products With Params
 */
export const loadProductsWithParamsMutation = (options?: Partial<Options<LoadProductsWithParamsData>>): UseMutationOptions<unknown, AxiosError<LoadProductsWithParamsError>, Options<LoadProductsWithParamsData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<LoadProductsWithParamsError>, Options<LoadProductsWithParamsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loadProductsWithParams({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loadProductVariantsWithParamsQueryKey = (options: Options<LoadProductVariantsWithParamsData>) => createQueryKey('loadProductVariantsWithParams', options);

/**
 * Load Product Variants With Params
 */
export const loadProductVariantsWithParamsOptions = (options: Options<LoadProductVariantsWithParamsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loadProductVariantsWithParams({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loadProductVariantsWithParamsQueryKey(options)
    });
};

/**
 * Load Product Variants With Params
 */
export const loadProductVariantsWithParamsMutation = (options?: Partial<Options<LoadProductVariantsWithParamsData>>): UseMutationOptions<unknown, AxiosError<LoadProductVariantsWithParamsError>, Options<LoadProductVariantsWithParamsData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<LoadProductVariantsWithParamsError>, Options<LoadProductVariantsWithParamsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loadProductVariantsWithParams({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loadOrdersWithParamsQueryKey = (options: Options<LoadOrdersWithParamsData>) => createQueryKey('loadOrdersWithParams', options);

/**
 * Load Orders With Params
 */
export const loadOrdersWithParamsOptions = (options: Options<LoadOrdersWithParamsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loadOrdersWithParams({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loadOrdersWithParamsQueryKey(options)
    });
};

/**
 * Load Orders With Params
 */
export const loadOrdersWithParamsMutation = (options?: Partial<Options<LoadOrdersWithParamsData>>): UseMutationOptions<unknown, AxiosError<LoadOrdersWithParamsError>, Options<LoadOrdersWithParamsData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<LoadOrdersWithParamsError>, Options<LoadOrdersWithParamsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loadOrdersWithParams({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loadLineItemsWithParamsQueryKey = (options: Options<LoadLineItemsWithParamsData>) => createQueryKey('loadLineItemsWithParams', options);

/**
 * Load Line Items With Params
 */
export const loadLineItemsWithParamsOptions = (options: Options<LoadLineItemsWithParamsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loadLineItemsWithParams({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loadLineItemsWithParamsQueryKey(options)
    });
};

/**
 * Load Line Items With Params
 */
export const loadLineItemsWithParamsMutation = (options?: Partial<Options<LoadLineItemsWithParamsData>>): UseMutationOptions<unknown, AxiosError<LoadLineItemsWithParamsError>, Options<LoadLineItemsWithParamsData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<LoadLineItemsWithParamsError>, Options<LoadLineItemsWithParamsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loadLineItemsWithParams({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loadCustomersWithParamsQueryKey = (options: Options<LoadCustomersWithParamsData>) => createQueryKey('loadCustomersWithParams', options);

/**
 * Load Customers With Params
 */
export const loadCustomersWithParamsOptions = (options: Options<LoadCustomersWithParamsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loadCustomersWithParams({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loadCustomersWithParamsQueryKey(options)
    });
};

/**
 * Load Customers With Params
 */
export const loadCustomersWithParamsMutation = (options?: Partial<Options<LoadCustomersWithParamsData>>): UseMutationOptions<unknown, AxiosError<LoadCustomersWithParamsError>, Options<LoadCustomersWithParamsData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<LoadCustomersWithParamsError>, Options<LoadCustomersWithParamsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loadCustomersWithParams({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loadAddressesWithParamsQueryKey = (options: Options<LoadAddressesWithParamsData>) => createQueryKey('loadAddressesWithParams', options);

/**
 * Load Addresses With Params
 */
export const loadAddressesWithParamsOptions = (options: Options<LoadAddressesWithParamsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loadAddressesWithParams({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loadAddressesWithParamsQueryKey(options)
    });
};

/**
 * Load Addresses With Params
 */
export const loadAddressesWithParamsMutation = (options?: Partial<Options<LoadAddressesWithParamsData>>): UseMutationOptions<unknown, AxiosError<LoadAddressesWithParamsError>, Options<LoadAddressesWithParamsData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<LoadAddressesWithParamsError>, Options<LoadAddressesWithParamsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loadAddressesWithParams({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const generalAssistantChatCompletionQueryKey = (options: Options<GeneralAssistantChatCompletionData>) => createQueryKey('generalAssistantChatCompletion', options);

/**
 * General Assistant Chat Completion
 * Reads history from chat, adds a new message from the user and generates a new response using an LLM with agent pattern.
 * Stores tool calls and their results as part of the chat history for complete tracking.
 */
export const generalAssistantChatCompletionOptions = (options: Options<GeneralAssistantChatCompletionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await generalAssistantChatCompletion({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: generalAssistantChatCompletionQueryKey(options)
    });
};

/**
 * General Assistant Chat Completion
 * Reads history from chat, adds a new message from the user and generates a new response using an LLM with agent pattern.
 * Stores tool calls and their results as part of the chat history for complete tracking.
 */
export const generalAssistantChatCompletionMutation = (options?: Partial<Options<GeneralAssistantChatCompletionData>>): UseMutationOptions<GeneralAssistantChatCompletionResponse, AxiosError<GeneralAssistantChatCompletionError>, Options<GeneralAssistantChatCompletionData>> => {
    const mutationOptions: UseMutationOptions<GeneralAssistantChatCompletionResponse, AxiosError<GeneralAssistantChatCompletionError>, Options<GeneralAssistantChatCompletionData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await generalAssistantChatCompletion({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAllMessagesForChatQueryKey = (options: Options<GetAllMessagesForChatData>) => createQueryKey('getAllMessagesForChat', options);

/**
 * Get All Messages For Chat
 */
export const getAllMessagesForChatOptions = (options: Options<GetAllMessagesForChatData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllMessagesForChat({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllMessagesForChatQueryKey(options)
    });
};